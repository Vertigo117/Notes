import { Component, HostBinding, HostListener, Input, } from '@angular/core';
import { NodeSelection } from 'prosemirror-state';
import { asyncScheduler, fromEvent } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
import { computePosition, detectOverflow, offset, autoPlacement } from '@floating-ui/dom';
import * as i0 from "@angular/core";
import * as i1 from "../../../pipes/sanitize/sanitize-html.pipe";
import * as i2 from "../bubble/bubble.component";
import * as i3 from "@angular/common";
export class FloatingMenuComponent {
    constructor(el, sanitizeHTML) {
        this.el = el;
        this.sanitizeHTML = sanitizeHTML;
        this.autoPlace = false;
        this.posLeft = 0;
        this.posTop = 0;
        this.showMenu = false;
        this.dragging = false;
    }
    get display() {
        return {
            visibility: this.showMenu ? 'visible' : 'hidden',
            opacity: this.showMenu ? '1' : '0',
            top: `${this.posTop}px`,
            left: `${this.posLeft}px`,
        };
    }
    get view() {
        return this.editor.view;
    }
    onMouseDown(e) {
        const target = e.target;
        if (this.el.nativeElement.contains(target) && target.nodeName !== 'INPUT') {
            e.preventDefault();
            return;
        }
        this.dragging = true;
    }
    onKeyDown(e) {
        const target = e.target;
        if (target.nodeName === 'INPUT') {
            return;
        }
        this.dragging = true;
        this.hide();
    }
    onMouseUp(e) {
        const target = e.target;
        if (this.el.nativeElement.contains(target) || target.nodeName === 'INPUT') {
            e.preventDefault();
            return;
        }
        this.dragging = false;
        this.useUpdate();
    }
    onKeyUp(e) {
        const target = e.target;
        if (target.nodeName === 'INPUT') {
            return;
        }
        this.dragging = false;
        this.useUpdate();
    }
    useUpdate() {
        if (!this.view) {
            return;
        }
        this.update(this.view);
    }
    hide() {
        this.showMenu = false;
    }
    show() {
        this.showMenu = true;
    }
    async calculateBubblePosition(view) {
        const { state: { selection } } = view;
        const { from, to } = selection;
        const start = view.coordsAtPos(from);
        const end = view.coordsAtPos(to);
        const selectionElement = {
            getBoundingClientRect() {
                if (selection instanceof NodeSelection) {
                    const node = view.nodeDOM(from);
                    return node.getBoundingClientRect();
                }
                const { top, left } = start;
                const { bottom, right } = end;
                return {
                    x: left,
                    y: top,
                    top,
                    bottom,
                    left,
                    right,
                    width: right - left,
                    height: bottom - top,
                };
            },
        };
        // the floating bubble itself
        const bubbleEl = this.el.nativeElement;
        const { x: left, y: top } = await computePosition(selectionElement, bubbleEl, {
            placement: 'top',
            middleware: [
                offset(5),
                this.autoPlace && autoPlacement({
                    boundary: view.dom,
                    padding: 5,
                    allowedPlacements: ['top', 'bottom'],
                }),
                {
                    // prevent overflow on right and left side
                    // since only top and bottom placements are allowed
                    // autoplacement can't handle overflows on the right and left
                    name: 'overflowMiddleware',
                    async fn(middlewareArgs) {
                        const overflow = await detectOverflow(middlewareArgs, {
                            boundary: view.dom,
                            padding: 5,
                        });
                        // overflows left
                        if (overflow.left > 0) {
                            return {
                                x: middlewareArgs.x + overflow.left,
                            };
                        }
                        // overflows right
                        if (overflow.right > 0) {
                            return {
                                x: middlewareArgs.x - overflow.right,
                            };
                        }
                        return {};
                    },
                },
            ].filter(Boolean),
        });
        return {
            left,
            top,
        };
    }
    canShowMenu(view) {
        const { state } = view;
        const { selection } = state;
        const { empty } = selection;
        if (selection instanceof NodeSelection) {
            if (selection.node.type.name === 'image') {
                return false;
            }
        }
        const hasFocus = this.view.hasFocus();
        if (!hasFocus || empty || this.dragging) {
            this.hide();
            return false;
        }
        return true;
    }
    update(view) {
        const canShowMenu = this.canShowMenu(view);
        if (!canShowMenu) {
            this.hide();
            return;
        }
        this.calculateBubblePosition(this.view).then(({ top, left }) => {
            if (!this.canShowMenu) {
                this.hide();
                return;
            }
            this.posLeft = left;
            this.posTop = top;
            this.show();
        });
    }
    ngOnInit() {
        if (!this.editor) {
            throw new Error('NgxEditor: Required editor instance');
        }
        this.updateSubscription = this.editor.update
            .subscribe((view) => {
            this.update(view);
        });
        this.resizeSubscription = fromEvent(window, 'resize').pipe(throttleTime(500, asyncScheduler, { leading: true, trailing: true })).subscribe(() => {
            this.useUpdate();
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
        this.resizeSubscription.unsubscribe();
    }
}
FloatingMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: FloatingMenuComponent, deps: [{ token: i0.ElementRef }, { token: i1.SanitizeHtmlPipe }], target: i0.ɵɵFactoryTarget.Component });
FloatingMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.5", type: FloatingMenuComponent, selector: "ngx-editor-floating-menu", inputs: { editor: "editor", autoPlace: "autoPlace" }, host: { listeners: { "document:mousedown": "onMouseDown($event)", "document:keydown": "onKeyDown($event)", "document:mouseup": "onMouseUp($event)", "document:keyup": "onKeyUp($event)" }, properties: { "style": "this.display" } }, ngImport: i0, template: "<div #ref>\n  <ng-content></ng-content>\n</div>\n<ng-container *ngIf=\"ref.children.length === 0\">\n  <ngx-bubble [editor]=\"editor\"></ngx-bubble>\n</ng-container>\n", styles: ["*,*:before,*:after{box-sizing:border-box}:host{position:absolute;z-index:20;margin-bottom:5px;visibility:hidden;opacity:0}\n"], components: [{ type: i2.BubbleComponent, selector: "ngx-bubble", inputs: ["editor"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: FloatingMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-editor-floating-menu', template: "<div #ref>\n  <ng-content></ng-content>\n</div>\n<ng-container *ngIf=\"ref.children.length === 0\">\n  <ngx-bubble [editor]=\"editor\"></ngx-bubble>\n</ng-container>\n", styles: ["*,*:before,*:after{box-sizing:border-box}:host{position:absolute;z-index:20;margin-bottom:5px;visibility:hidden;opacity:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.SanitizeHtmlPipe }]; }, propDecorators: { display: [{
                type: HostBinding,
                args: ['style']
            }], editor: [{
                type: Input
            }], autoPlace: [{
                type: Input
            }], onMouseDown: [{
                type: HostListener,
                args: ['document:mousedown', ['$event']]
            }], onKeyDown: [{
                type: HostListener,
                args: ['document:keydown', ['$event']]
            }], onMouseUp: [{
                type: HostListener,
                args: ['document:mouseup', ['$event']]
            }], onKeyUp: [{
                type: HostListener,
                args: ['document:keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,